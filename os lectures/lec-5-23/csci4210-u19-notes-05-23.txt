[05/23/2019]

The URL for video-recordings of lectures has been posted to Submitty
 (under Course Materials)

In general, you can go to either lecture (or both); for exams,
 you can also go to either lecture time (but not both!)

Office hours have been posted and should start today!


TO DO (from 5/20):
(0) Read/review the syllabus and schedule

(1) Make sure you are in the course on Submitty

(2) Get Ubuntu up and running on your laptop and/or AWS cloud environment

(3) Get the C code examples to compile/run in your environment
    (make changes and see what happens...!)

(4) In C, write some code to read in (from a file or user input via scanf)
     a list of ten numbers (type double).  Store these values in an
      array.  Sort this list of numbers using one or more functions.

       (consider doing this in your favorite language first,
         then aim to port it to C)

    Rewrite your code and have it store a list of last names

(5) Write a C program to simulate caching:

    Interact with the user by repeatedly asking the user to input an
     integer; for each integer N, use a function to calculate the sum 1..N

    Pretend this is very expensive and you want to cache results

    Using only one array in C, implement a cache of values; the cache
     or array size must be 47 (though N will be much larger)

======================================================================

  PROCESS

 +------------------------+
 | runtime heap           | <== dynamically allocated memory
 |      | path    path2   |     -- the "new" keyword in C++/Java
 |      |                 |     -- in C, malloc(), calloc(), realloc()
 |      |                 |     -- don't forget to use free()...
 |      |                 |        ...otherwise, memory leak   :-(
 |      v                 |
 |                        |
 |                        |
 |                        |
 |                        |
 |      ^                 |
 |      |                 |
 |      |                 |
 |      | reverse() <100> |
 |      | main()          |
 | runtime stack          | <== statically allocated memory
 |------------------------|     (e.g., int x, int * y, etc.)
 | code/data/etc.         |
 +------------------------+
   ^^^
  this is read-only memory (bc it is built at compile time)

