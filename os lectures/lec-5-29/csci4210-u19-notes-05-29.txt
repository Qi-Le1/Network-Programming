[05/29/2019]

Quiz 1 ---- Yay!

-- clear your desktops

-- keep your eyes on your own paper!

--- when you are done, please hand in down front, then quietly leave

     (and see u tmrw!)




TO DO (from 5/20):
(0) Read/review the syllabus and schedule

(1) Make sure you are in the course on Submitty

(2) Get Ubuntu up and running on your laptop and/or AWS cloud environment

(3) Get the C code examples to compile/run in your environment
    (make changes and see what happens...!)

(4) In C, write some code to read in (from a file or user input via scanf)
     a list of ten numbers (type double).  Store these values in an
      array.  Sort this list of numbers using one or more functions.

       (consider doing this in your favorite language first,
         then aim to port it to C)

    Rewrite your code and have it store a list of last names

(5) Write a C program to simulate caching:

    Interact with the user by repeatedly asking the user to input an
     integer; for each integer N, use a function to calculate the sum 1..N

    Pretend this is very expensive and you want to cache results

    Using only one array in C, implement a cache of values; the cache
     or array size must be 47 (though N will be much larger)

======================================================================

  PROCESS

 +------------------------+
 | runtime heap           | <== dynamically allocated memory
 |      | >     YYYY ZZZ  |     -- the "new" keyword in C++/Java
 |      | XXXXXXXXXX      |     -- in C, malloc(), calloc(), realloc()
 |      | ^               |     -- don't forget to use free()...
 |      |                 |        ...otherwise, memory leak   :-(
 |      v                 |
 |                        |
 |                        |
 |                        |
 |                        |
 |      ^                 |
 |      |                 |
 |      |                 |
 |      | reverse() <100> |
 |      | main()          |
 | runtime stack          | <== statically allocated memory
 |------------------------|     (e.g., int x, int * y, etc.)
 | code/data/etc.         |
 +------------------------+
   ^^^
  this is read-only memory (bc it is built at compile time)

======================================================================

A process is a "running program" or "program in execution"

Processes have a variety of states:


   RUNNING           READY                 WAITING (on I/O)
    STATE            STATE                  STATE

   +-----+                               +-----------------------+
   |     |     +--------------------+    |                 P2 P8 |
   | CPU | <== | P3 | P6 | P5 | ... |    |  I/O Subsystem   P13  |
   | P11 |     +--------------------+    |                       |
   +-----+                               +-----------------------+

 (a CPU burst is a set of assembly instructions that are executed by
   the CPU for a given process)

 (an I/O burst is one or more I/O operations for a given process)


 RUNNING STATE: process is actually using the CPU
                (i.e., executing its instructions)

 READY STATE: process is ready to use the CPU (idle in the ready queue)

 WAITING STATE: process is waiting for I/O operation(s) to complete


CPU Scheduling (a.k.a. Short-Term Scheduling)

-- The scheduling system enables one process to use the CPU
    while other processes are waiting in the ready queue to use
     the CPU (or waiting in the I/O subsystem)

-- The goals of CPU scheduling are to make efficient use of the CPU
    and to minimize the turnaround and wait times for each running process

    -- We also want to achieve "fairness" among all processes


